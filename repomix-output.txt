This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
v1/
  db.js
  package.json
  schemas.js
  server-mcp.mjs
  test-server.mjs
v2/
  src/
    connection.ts
    index.ts
    types.ts
    validators.ts
  .env.example
  mcp-settings-example.json
  package.json
  test-setup.js
  test-tools.js
  tsconfig.json
.gitignore
LICENSE
README.md

================================================================
Files
================================================================

================
File: v1/db.js
================
import dotenv from "dotenv";
import mariadb from "mariadb";
import { schemasConfig } from "./schemas.js";

dotenv.config();

const DEFAULT_TIMEOUT = process.env.MARIADB_TIMEOUT_MS
	? Number.parseInt(process.env.MARIADB_TIMEOUT_MS, 10)
	: 10000;
const DEFAULT_ROW_LIMIT = process.env.MARIADB_ROW_LIMIT
	? Number.parseInt(process.env.MARIADB_ROW_LIMIT, 10)
	: 1000;
const DEBUG_SQL = process.env.MARIADB_DEBUG_SQL === "true";
const LOG_LEVEL = process.env.MARIADB_LOG_LEVEL || "info"; // info, warn, error, debug

function log(level, message, ...args) {
	const levels = ["error", "warn", "info", "debug"];
	if (levels.indexOf(level) <= levels.indexOf(LOG_LEVEL)) {
		console[level === "warn" ? "warn" : (level === "error" || level === 'debug') ? "error" : "log"](
			message,
			...args,
		);
	}
}

function parseArgsAndEnv() {
	const cliArgs = process.argv.slice(2);
	const envConfig = {
		host: process.env.MARIADB_HOST,
		port: process.env.MARIADB_PORT ?? "3306",
		user: process.env.MARIADB_USER,
		password: process.env.MARIADB_PASSWORD,
		database: process.env.MARIADB_DATABASE,
		allow_insert: process.env.MARIADB_ALLOW_INSERT === "true",
		allow_update: process.env.MARIADB_ALLOW_UPDATE === "true",
		allow_delete: process.env.MARIADB_ALLOW_DELETE === "true",
	};
	for (const arg of cliArgs) {
		if (arg.startsWith("host=")) envConfig.host = arg.split("=")[1];
		else if (arg.startsWith("port=")) envConfig.port = arg.split("=")[1];
		else if (arg.startsWith("user=")) envConfig.user = arg.split("=")[1];
		else if (arg.startsWith("password="))
			envConfig.password = arg.split("=")[1];
		else if (arg.startsWith("database="))
			envConfig.database = arg.split("=")[1];
	}

	return envConfig;
}

function validateConfig(rawConfig) {
	const host = schemasConfig.host.parse(rawConfig.host);
	const port = schemasConfig.port.parse(Number.parseInt(rawConfig.port, 10));
	const user = schemasConfig.user.parse(rawConfig.user);
	const password = schemasConfig.password.parse(rawConfig.password);
	const database = schemasConfig.database.parse(rawConfig.database);
	const allow_insert = schemasConfig.allow_insert.parse(rawConfig.allow_insert);
	const allow_update = schemasConfig.allow_update.parse(rawConfig.allow_update);
	const allow_delete = schemasConfig.allow_delete.parse(rawConfig.allow_delete);

	if (!host) throw new Error("MARIADB_HOST variável de ambiente é obrigatória");
	if (!user) throw new Error("MARIADB_USER variável de ambiente é obrigatória");
	if (!password)
		throw new Error("MARIADB_PASSWORD variável de ambiente é obrigatória");

	return {
		host,
		port,
		user,
		password,
		database,
		allow_insert,
		allow_update,
		allow_delete,
	};
}

function getConfigFromEnv() {
	const rawConfig = parseArgsAndEnv();
	return validateConfig(rawConfig);
}

function getPoolKey(cfg) {
	const strHost = cfg.host.split(".").join("_");
	return `${strHost}_${cfg.user}_${cfg.database}`;
}

const config = getConfigFromEnv();
const pools = [];

async function executeQuery(sql, database) {
	const key = getPoolKey(config);

	if (!pools[key]) {
		log("info", `[DB] Criando novo pool para ${key}`);
		pools[key] = mariadb.createPool({
			host: config.host,
			port: config.port,
			user: config.user,
			password: config.password,
			connectionLimit: 1,
			connectTimeout: DEFAULT_TIMEOUT,
		});
		if (DEBUG_SQL) {
			log("debug", `[DB] Criando novo pool para ${key} : ${new Date().toLocaleString("pt-BR")}`);
			log('debug', "****************************");
			log('debug', `** Host: ${config.host}`);
			log('debug', `** Port: ${config.port}`);
			log('debug', `** User: ${config.user}`);
			log('debug', `** Database: ${config.database}`);
			log('debug', "****************************");
		}
	}
	if (!pools[key]) {
		throw new Error(`Não foi possível criar o pool para ${key}`);
	}
	const connection = await pools[key].getConnection();
	if (DEBUG_SQL) {
		log("debug", `[DB] conexão para ${key} Id: ${connection.threadId}`);
	}

	try {
		if (DEBUG_SQL) log("debug", "[SQL] Nova conexão adquirida do pool");
		if (database) {
			if (DEBUG_SQL) log("debug", `[SQL] USE \`${database}\``);
			await connection.query(`USE \`${database}\``);
		}
		if (DEBUG_SQL) log("debug", `[SQL] Executando: ${sql}`);
		const [rows, fields] = await connection.query({
			metaAsArray: true,
			dateStrings: true,
			namedPlaceholders: true,
			insertIdAsNumber: true,
			decimalAsNumber: true,
			bigIntAsNumber: true,
			timeout: DEFAULT_TIMEOUT,
			sql: sql,
		});
		const limitedRows =
			Array.isArray(rows) && rows.length > DEFAULT_ROW_LIMIT
				? rows.slice(0, DEFAULT_ROW_LIMIT)
				: rows;
		return { rows: limitedRows, fields };
	} catch (error) {
		log("error", "[Erro] SQL com falha:", error, "Query:", sql);
		throw error;
	} finally {
		if (connection) {
			connection.release();
			if (DEBUG_SQL) log("debug", "[SQL] Conexão devolvida ao pool");
		}
	}
}

async function closeAllPools() {
	for (const key of Object.keys(pools)) {
		try {
			await pools[key].end();
			log("info", `[DB] Pool fechado para ${key}`);
		} catch (err) {
			log("warn", `[DB] Erro ao fechar pool ${key}:`, err);
		}
	}
}

export {
	DEFAULT_TIMEOUT,
	DEFAULT_ROW_LIMIT,
	DEBUG_SQL,
	config,
	pools,
	getConfigFromEnv,
	executeQuery,
	closeAllPools,
};

================
File: v1/package.json
================
{
  "name": "mjs-module",
  "version": "1.0.0",
  "description": "Submódulo ESM para MariaDB MCP Server",
  "type": "module",
  "private": true,
  "keywords": [
    "mcp",
    "mysql",
    "mariadb",
    "database",
    "model-context-protocol",
    "ai",
    "llm"
  ],
  "author": "Roberto Salgado <roberto@rjssistemas.com.br>",
  "dependencies": {
    "@modelcontextprotocol/sdk": "^1.8.0",
    "mariadb": "^3.4.1",
    "zod": "^3.24.2"
  },
  "devDependencies": {
    "@types/node": "^22.14.0",
    "dotenv": "^16.4.7",
    "typescript": "^5.8.3"
  }
}

================
File: v1/schemas.js
================
import { z } from "zod";

const schemas = {
  toolInputs: {
    show_databases: z.object({}),
    show_tables: z.object({
      database: z.string().optional(),
    }),
    describe_table: z.object({
      database: z.string().optional(),
      table: z.string(),
    }),
    run_query: z.object({
      sql: z.string(),
      database: z.string().optional(),
    }),
  },
};

const schemasConfig = {
  host: z.string(),
  port: z.number(),
  user: z.string(),
  password: z.string(),
  database: z.string().optional(),
  allow_insert: z.boolean().default(false),
  allow_update: z.boolean().default(false),
  allow_delete: z.boolean().default(false),
};

export { schemas, schemasConfig };

================
File: v1/server-mcp.mjs
================
import { Server } from "@modelcontextprotocol/sdk/server/index.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import {
  McpError, ErrorCode,
  CallToolRequestSchema,
//  ListResourcesRequestSchema,
  ListToolsRequestSchema,
//  ReadResourceRequestSchema,
} from "@modelcontextprotocol/sdk/types.js";
import { schemas } from "./schemas.js";
import { config, executeQuery, closeAllPools } from "./db.js";

const TOOL_DEFINITIONS = [
  {
    name: "show_databases",
    description:
      "Retorna uma lista com os nomes de todos os bancos de dados acessíveis no servidor MariaDB",
    inputSchema: {
      type: "object",
      properties: {
      },
      required: [],
    },
  },
  {
    name: "show_tables",
    description:
      "Retorna uma lista com os nomes e tipos de todas as tabelas do banco de dados especificado. Se nenhum banco de dados for informado, utiliza o banco de dados padrão.",
    inputSchema: {
      type: "object",
      id: "urn:jsonschema:database",
      properties: {
        database: {
          type: "string",
          description:
            "Nome do banco de dados (opcional, usa o padrão se não for especificado)",
        },
      },
      required: [],
    },
  },
  {
    name: "describe_table",
    description:
      "Retorna a estrutura detalhada (colunas, tipos, nulabilidade, etc.) de uma tabela específica em um banco de dados. O banco de dados pode ser especificado ou será usado o padrão.",
    inputSchema: {
      type: "object",
      properties: {
        database: {
          type: "string",
          description:
            "Nome do banco de dados (opcional, usa o padrão se não for especificado)",
        },
        table: {
          type: "string",
          description: "Nome da tabela",
        },
      },
      required: ["table"],
    },
  },
  {
    name: "run_query",
    description:
      "Executa uma consulta SQL no banco de dados especificado ou padrão, retornando o resultado da consulta.",
    inputSchema: {
      type: "object",
      properties: {
        sql: {
          type: "string",
          description: `Instruções SQL permitidas: (SELECT${config.allow_insert ? ", INSERT" : ""}${config.allow_update ? ", UPDATE" : ""}${config.allow_delete ? ", DELETE" : ""}, SHOW, DESCRIBE, EXPLAIN)`,
        },
        database: {
          type: "string",
          description:
            "Nome do banco de dados (opcional, usa o padrão se não for especificado)",
        },
      },
      required: ["sql"],
    },
  },
];

const server = new Server(
  {
    name: "mariadb-mcp-server",
    version: "0.1.0",
  },
  {
    capabilities: {
      resources: {},
      tools: {},
    },
  },
);

async function show_databases() {
  const { rows } = await executeQuery("SHOW DATABASES");
  return {
    content: [
      {
        type: "text",
        text: JSON.stringify(rows, null, 2),
      },
    ],
    isError: false,
  };
}

async function show_tables(args) {
  const parsed = schemas.toolInputs.show_tables.parse(args);
  const database = parsed.database ?? config.database;
  if (!database) {
    throw new McpError(
      ErrorCode.InvalidParams,
      `O nome do banco de dados é obrigatório: ${database}`,
    );
  }
  const { rows } = await executeQuery("SHOW FULL TABLES", database);
  return {
    content: [
      {
        type: "text",
        text: JSON.stringify(rows, null, 2),
      },
    ],
    isError: false,
  };
}

async function describe_table(args) {
  const parsed = schemas.toolInputs.describe_table.parse(args);
  const database = parsed.database ?? config.database;
  const table = parsed.table;
  if (!database) {
    throw new McpError(
      ErrorCode.InvalidParams,
      "O nome do banco de dados é obrigatório",
    );
  }
  if (!table) {
    throw new McpError(
      ErrorCode.InvalidParams,
      "O nome da tabela é obrigatório",
    );
  }
  const { rows } = await executeQuery(`DESCRIBE \`${table}\``, database);
  return {
    content: [
      {
        type: "text",
        text: JSON.stringify(rows, null, 2),
      },
    ],
    isError: false,
  };
}

async function run_query(args) {
  const parsed = schemas.toolInputs.run_query.parse(args);
  const query = parsed.sql;
  const database = parsed.database ?? config.database;
  if (!database) {
    throw new McpError(
      ErrorCode.InvalidParams,
      "O nome do banco de dados é obrigatório",
    );
  }
  if (!query) {
    throw new McpError(ErrorCode.InvalidParams, "Faltando comando SQL (MySQL)");
  }
  const { rows } = await executeQuery(query, database);
  return {
    content: [
      {
        type: "text",
        text: JSON.stringify(rows, null, 2),
      },
    ],
    isError: false,
  };
}

function isAllowedQuery(sql) {
  if (!sql || typeof sql !== "string") {
    console.error("[SQL] SQL deve ser uma string não vazia");
    return false;
  }
  const normalizedQuery = sql
    .replace(/--.*$/gm, "")
    .replace(/\/\*[\s\S]*?\*\//g, "")
    .replace(/\s+/g, " ")
    .trim()
    .toUpperCase();

  const ALLOWED_COMMANDS = [
    "SELECT",
    "SHOW",
    "DESCRIBE",
    "DESC",
    "EXPLAIN",
    "INSERT",
    "UPDATE",
    "DELETE",
  ];

  const DISALLOWED_COMMANDS = [
    "INSERT",
    "UPDATE",
    "DELETE",
    "DROP",
    "CREATE",
    "ALTER",
    "TRUNCATE",
    "RENAME",
    "REPLACE",
    "GRANT",
    "REVOKE",
    "LOCK",
    "UNLOCK",
    "CALL",
    "EXEC",
    "EXECUTE",
    "SET",
    "START",
    "BEGIN",
    "COMMIT",
    "ROLLBACK",
  ];

  const startsWithAllowed = ALLOWED_COMMANDS.some(
    (cmd) => normalizedQuery.startsWith(`${cmd} `) || normalizedQuery === cmd,
  );

  const containsDisallowed = DISALLOWED_COMMANDS.some((cmd) => {
    if (cmd === "INSERT" && config.allow_insert) return false;
    if (cmd === "UPDATE" && config.allow_update) return false;
    if (cmd === "DELETE" && config.allow_delete) return false;
    const regex = new RegExp(`(^|\\s)${cmd}(\\s|$)`);
    return regex.test(normalizedQuery);
  });

  const hasMultipleStatements =
    normalizedQuery.includes(";") && !normalizedQuery.endsWith(";");

  const allowed =
    startsWithAllowed && !containsDisallowed && !hasMultipleStatements;

  if (!allowed) {
    console.error(
      "[SQL] SQL contém comandos não permitidos ou não é permitida pela configuração atual!",
    );
  }
  return allowed;
}

server.setRequestHandler(ListToolsRequestSchema, async () => {
  return { tools: TOOL_DEFINITIONS };
});

server.setRequestHandler(CallToolRequestSchema, async (request) => {
  try {
    switch (request.params.name) {
      case "show_databases":
        return show_databases();
      case "show_tables":
        return show_tables(request.params.arguments);
      case "describe_table":
        return describe_table(request.params.arguments);
      case "run_query":
        return run_query(request.params.arguments);
      default:
        throw new McpError(
          ErrorCode.MethodNotFound,
          `[Error] Ferramenta desconhecida: ${request.params.name}`,
          request.params.arguments,
        );
    }
  } catch (error) {
    console.error(
      `Erro ao executar a ferramenta ${request.params.name}:`,
      error,
    );
    return {
      content: [
        {
          type: "text",
          text: `Error: ${error instanceof Error ? error.message : String(error)
            }`,
        },
      ],
      isError: true,
    };
  }
});

async function main() {
  console.log("Servidor MariaDB-MCP iniciando...");
  try {
    const transport = new StdioServerTransport();
    await server.connect(transport);
  } catch (error) {
    console.error("[Fatal] Falha ao iniciar o servidor:", error);
    process.exit(1);
  }
}

process.on("SIGINT", async () => {
  console.log("[Desligando] Fechando conexão com o servidor de banco de dados");
  await closeAllPools();
  process.exit(0);
});

main().catch((error) => {
  console.error("Erro Fatal sem função para executar:", error);
  process.exit(1);
});

export {
  show_databases,
  show_tables,
  describe_table,
  run_query,
  isAllowedQuery,
};

================
File: v1/test-server.mjs
================
import {
  show_databases,
  show_tables,
  describe_table,
  run_query,
} from "./server-mcp.mjs";

// ======= CONFIGURAÇÃO DOS TESTES =======
// Informe aqui o banco de dados e tabela que deseja testar
const TEST_DATABASE = "anestesia";
const TEST_TABLE = "medicos";
// =======================================

async function testShowDatabases() {
  console.log("Testando show_databases...");
  try {
    const result = await show_databases();
    console.log("Resultado:", result);
  } catch (error) {
    console.error("Erro:", error);
  }
}

async function testShowTables() {
  console.log("Testando show_tables...");
  try {
    const result = await show_tables({ database: TEST_DATABASE });
    console.log("Resultado:", result);
  } catch (error) {
    console.error("Erro:", error);
  }
}

async function testDescribeTable() {
  console.log("Testando describe_table...");
  try {
    const result = await describe_table({ database: TEST_DATABASE, table: TEST_TABLE });
    console.log("Resultado:", result);
  } catch (error) {
    console.error("Erro:", error);
  }
}

async function testRunQuery() {
  console.log("Testando run_query...");
  try {
    const result = await run_query({ database: TEST_DATABASE, sql: `SELECT * FROM \`${TEST_TABLE}\` LIMIT 5` });
    console.log("Resultado:", result);
  } catch (error) {
    console.error("Erro:", error);
  }
}

async function runAllTests() {
  await testShowDatabases();
//  await testShowTables();
//  await testDescribeTable();
//  await testRunQuery();
}

runAllTests().catch((error) => {
  console.error("Erro inesperado nos testes:", error);
});

================
File: v2/src/connection.ts
================
/**
 * MariaDB connection management for MCP server
 */

import mariadb from "mariadb";
import { MariaDBConfig } from "./types.js";
import { isAlloowedQuery } from "./validators.js";

// Default connection timeout in milliseconds
const DEFAULT_TIMEOUT = 10000;

// Default row limit for query results
const DEFAULT_ROW_LIMIT = 1000;

let pool: mariadb.Pool | null = null;
let connection: mariadb.PoolConnection | null = null;

/**
 * Create a MariaDB connection pool
 */
export function createConnectionPool(): mariadb.Pool {
  console.error("[Setup] Creating MariaDB connection pool");
  const config = getConfigFromEnv();
  if (pool) {
    console.error("[Setup] Connection pool already exists");
    return pool;
  }
  try {
    pool = mariadb.createPool({
      host: config.host,
      port: config.port,
      user: config.user,
      password: config.password,
      database: config.database,
      connectionLimit: 2,
      connectTimeout: DEFAULT_TIMEOUT,
    });
  } catch (error) {
    console.error("[Error] Failed to create connection pool:", error);
    throw error;
  }
  return pool;
}

/**
 * Execute a query with error handling and logging
 */
export async function executeQuery(
  sql: string,
  params: any[] = [],
  database?: string
): Promise<{ rows: any; fields: mariadb.FieldInfo[] }> {
  console.error(`[Query] Executing: ${sql}`);
  // Create connection pool if not already created
  if (!pool) {
    console.error("[Setup] Connection pool not found, creating a new one");
    pool = createConnectionPool();
  }
  try {
    // Get connection from pool
    if (connection) {
      console.error("[Query] Reusing existing connection");
    } else {
      console.error("[Query] Creating new connection");
      connection = await pool.getConnection();
    }

    // Use specific database if provided
    if (database) {
      console.error(`[Query] Using database: ${database}`);
      await connection.query(`USE \`${database}\``);
    }
    if (!isAlloowedQuery(sql)) {
      throw new Error("Query not allowed");
    }
    // Execute query with timeout
    const [rows, fields] = await connection.query({
      metaAsArray: true,
      namedPlaceholders: true,
      sql,
      ...params,
      timeout: DEFAULT_TIMEOUT,
    });

    // Apply row limit if result is an array
    const limitedRows =
      Array.isArray(rows) && rows.length > DEFAULT_ROW_LIMIT
        ? rows.slice(0, DEFAULT_ROW_LIMIT)
        : rows;

    // Log result summary
    console.error(
      `[Query] Success: ${
        Array.isArray(rows) ? rows.length : 1
      } rows returned with ${JSON.stringify(params)}`
    );

    return { rows: limitedRows, fields };
  } catch (error) {
    if (connection) {
      connection.release();
      console.error("[Query] Connection released with error");
    }
    console.error("[Error] Query execution failed:", error);
    throw error;
  } finally {
    // Release connection back to pool
    if (connection) {
      connection.release();
      console.error("[Query] Connection released");
    }
  }
}

/**
 * Get MariaDB connection configuration from environment variables
 */
export function getConfigFromEnv(): MariaDBConfig {
  const host = process.env.MARIADB_HOST;
  const portStr = process.env.MARIADB_PORT;
  const user = process.env.MARIADB_USER;
  const password = process.env.MARIADB_PASSWORD;
  const database = process.env.MARIADB_DATABASE;
  const allow_insert = process.env.MARIADB_ALLOW_INSERT === "true";
  const allow_update = process.env.MARIADB_ALLOW_UPDATE === "true";
  const allow_delete = process.env.MARIADB_ALLOW_DELETE === "true";

  if (!host) throw new Error("MARIADB_HOST environment variable is required");
  if (!user) throw new Error("MARIADB_USER environment variable is required");
  if (!password)
    throw new Error("MARIADB_PASSWORD environment variable is required");

  const port = portStr ? parseInt(portStr, 10) : 3306;

  console.error("[Setup] MariaDB configuration:", {
    host: host,
    port: port,
    user: user,
    database: database || "(default not set)",
  });

  return {
    host,
    port,
    user,
    password,
    database,
    allow_insert,
    allow_update,
    allow_delete,
  };
}

export function endConnection() {
  if (pool) {
    return pool.end();
  }
}

================
File: v2/src/index.ts
================
#!/usr/bin/env node

/**
 * MariaDB Database Access MCP Server
 *
 * This MCP server provides access to MariaDB databases.
 * It allows:
 * - Listing available databases
 * - Listing tables in a database
 * - Describing table schemas
 * - Executing read-only SQL queries
 */

import { Server } from "@modelcontextprotocol/sdk/server/index.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import {
  CallToolRequestSchema,
  ErrorCode,
  ListToolsRequestSchema,
  McpError,
} from "@modelcontextprotocol/sdk/types.js";

import {
  createConnectionPool,
  executeQuery,
  endConnection,
} from "./connection.js";

/**
 * Create an MCP server with tools for MariaDB database access
 */
const server = new Server(
  {
    name: "mariadb-mcp-server",
    version: "0.0.1",
  },
  {
    capabilities: {
      tools: {},
    },
  }
);

/**
 * Handler that lists available tools for MariaDB database access
 */
server.setRequestHandler(ListToolsRequestSchema, async () => {
  return {
    tools: [
      {
        name: "list_databases",
        description: "List all accessible databases on the MariaDB server",
        inputSchema: {
          type: "object",
          properties: {},
          required: [],
        },
      },
      {
        name: "list_tables",
        description: "List all tables in a specified database",
        inputSchema: {
          type: "object",
          properties: {
            database: {
              type: "string",
              description:
                "Database name (optional, uses default if not specified)",
            },
          },
          required: [],
        },
      },
      {
        name: "describe_table",
        description: "Show the schema for a specific table",
        inputSchema: {
          type: "object",
          properties: {
            database: {
              type: "string",
              description:
                "Database name (optional, uses default if not specified)",
            },
            table: {
              type: "string",
              description: "Table name",
            },
          },
          required: ["table"],
        },
      },
      {
        name: "execute_query",
        description: "Execute a SQL query",
        inputSchema: {
          type: "object",
          properties: {
            query: {
              type: "string",
              description: `SQL query (only SELECT, ${
                process.env.MARIADB_ALLOW_INSERT ? "INSERT," : ""
              } ${process.env.MARIADB_ALLOW_UPDATE ? "UPDATE," : ""} ${
                process.env.MARIADB_ALLOW_DELETE ? "DELETE," : ""
              } SHOW, DESCRIBE, and EXPLAIN statements are allowed)`,
            },
            database: {
              type: "string",
              description:
                "Database name (optional, uses default if not specified)",
            },
          },
          required: ["query"],
        },
      },
    ],
  };
});

/**
 * Handler for MariaDB database access tools
 */
server.setRequestHandler(CallToolRequestSchema, async (request) => {
  try {
    createConnectionPool();
  } catch (error) {
    console.error("[Fatal] Failed to initialize MariaDB connection:", error);
    process.exit(1);
  }

  try {
    switch (request.params.name) {
      case "list_databases": {
        console.error("[Tool] Executing list_databases");
        const { rows } = await executeQuery("SHOW DATABASES");
        return {
          content: [
            {
              type: "text",
              text: JSON.stringify(rows, null, 2),
            },
          ],
        };
      }

      case "list_tables": {
        console.error("[Tool] Executing list_tables");

        const database = request.params.arguments?.database as
          | string
          | undefined;

        const { rows } = await executeQuery("SHOW FULL TABLES", [], database);

        return {
          content: [
            {
              type: "text",
              text: JSON.stringify(rows, null, 2),
            },
          ],
        };
      }

      case "describe_table": {
        console.error("[Tool] Executing describe_table");

        const database = request.params.arguments?.database as
          | string
          | undefined;
        const table = request.params.arguments?.table as string;

        if (!table) {
          throw new McpError(ErrorCode.InvalidParams, "Table name is required");
        }

        const { rows } = await executeQuery(
          `DESCRIBE \`${table}\``,
          [],
          database
        );

        return {
          content: [
            {
              type: "text",
              text: JSON.stringify(rows, null, 2),
            },
          ],
        };
      }

      case "execute_query": {
        console.error("[Tool] Executing execute_query");

        const query = request.params.arguments?.query as string;
        const database = request.params.arguments?.database as
          | string
          | undefined;

        if (!query) {
          throw new McpError(ErrorCode.InvalidParams, "Query is required");
        }

        const { rows } = await executeQuery(query, [], database);

        return {
          content: [
            {
              type: "text",
              text: JSON.stringify(rows, null, 2),
            },
          ],
        };
      }

      default:
        throw new McpError(
          ErrorCode.MethodNotFound,
          `Unknown tool: ${request.params.name}`
        );
    }
  } catch (error) {
    console.error("[Error] Tool execution failed:", error);

    // Format error message for client
    return {
      content: [
        {
          type: "text",
          text: `Error: ${
            error instanceof Error ? error.message : String(error)
          }`,
        },
      ],
      isError: true,
    };
  }
});

/**
 * Start the server using stdio transport
 */
async function main() {
  console.error("[Setup] Starting MariaDB MCP server");

  try {
    const transport = new StdioServerTransport();
    await server.connect(transport);
    console.error("[Setup] MariaDB MCP server running on stdio");
  } catch (error) {
    console.error("[Fatal] Failed to start server:", error);
    process.exit(1);
  }
}

// Handle process termination
process.on("SIGINT", async () => {
  console.error("[Shutdown] Closing MariaDB connection pool");
  await endConnection();
  process.exit(0);
});

// Start the server
main().catch((error) => {
  console.error("[Fatal] Unhandled error:", error);
  process.exit(1);
});

================
File: v2/src/types.ts
================
/**
 * Type definitions for MariaDB MCP server
 */

// MariaDB connection configuration
export interface MariaDBConfig {
  host: string;
  port: number;
  user: string;
  password: string;
  database?: string;
  allow_insert: boolean;
  allow_update: boolean;
  allow_delete: boolean;
}

// Database information
export interface DatabaseInfo {
  name: string;
}

// Table information
export interface TableInfo {
  name: string;
  type: string;
}

// Column information
export interface ColumnInfo {
  Field: string;
  Type: string;
  Null: string;
  Key: string;
  Default: string | null;
  Extra: string;
}

// Query result
export interface QueryResult {
  rows: any[];
  fields: any[];
}

================
File: v2/src/validators.ts
================
/**
 * SQL query validators for MariaDB MCP server
 * Ensures that only read-only queries are allowed
 */

// List of allowed SQL commands
const ALLOWED_COMMANDS = [
  "SELECT",
  "SHOW",
  "DESCRIBE",
  "DESC",
  "EXPLAIN",
  "INSERT",
  "UPDATE",
  "DELETE",
];

// List of disallowed SQL commands (write operations)
const DISALLOWED_COMMANDS = [
  "DROP",
  "CREATE",
  "ALTER",
  "TRUNCATE",
  "RENAME",
  "REPLACE",
  "GRANT",
  "REVOKE",
  "LOCK",
  "UNLOCK",
  "CALL",
  "EXEC",
  "EXECUTE",
  "SET",
  "START",
  "BEGIN",
  "COMMIT",
  "ROLLBACK",
];

/**
 * Validates if a SQL query is read-only
 * @param query SQL query to validate
 * @returns true if the query is read-only, false otherwise
 */
export function isAlloowedQuery(query: string): boolean {
  // Normalize query by removing comments and extra whitespace
  const normalizedQuery = query
    .replace(/--.*$/gm, "") // Remove single-line comments
    .replace(/\/\*[\s\S]*?\*\//g, "") // Remove multi-line comments
    .replace(/\s+/g, " ") // Normalize whitespace
    .trim()
    .toUpperCase();
  const ALLOW_INSERT = process.env.MARIADB_ALLOW_INSERT === "true";
  const ALLOW_UPDATE = process.env.MARIADB_ALLOW_UPDATE === "true";
  const ALLOW_DELETE = process.env.MARIADB_ALLOW_DELETE === "true";

  // Check if query starts with an allowed command
  const startsWithAllowed = ALLOWED_COMMANDS.some(
    (cmd) => normalizedQuery.startsWith(cmd + " ") || normalizedQuery === cmd
  );
  const startsWithAllowedNoSpace =
    normalizedQuery.startsWith("INSERT") && !ALLOW_INSERT;
  // Check if query contains any disallowed commands
  const containsDisallowed = DISALLOWED_COMMANDS.some((cmd) => {
    if (cmd === "INSERT" && !ALLOW_INSERT) {
      return false; // Skip INSERT if not allowed
    }
    if (cmd === "UPDATE" && !ALLOW_UPDATE) {
      return false; // Skip UPDATE if not allowed
    }
    if (cmd === "DELETE" && !ALLOW_DELETE) {
      return false; // Skip DELETE if not allowed
    }
    const regex = new RegExp(`(^|\\s)${cmd}(\\s|$)`);
    return regex.test(normalizedQuery);
  });

  // Check for multiple statements (;)
  const hasMultipleStatements =
    normalizedQuery.includes(";") && !normalizedQuery.endsWith(";");

  // Query is read-only if it starts with an allowed command,
  // doesn't contain any disallowed commands, and doesn't have multiple statements
  return startsWithAllowed && !containsDisallowed && !hasMultipleStatements;
}

/**
 * Validates if a SQL query is safe to execute
 * @param query SQL query to validate
 * @throws Error if the query is not safe
 */
export function validateQuery(query: string): void {
  console.error("[Validator] Validating query:", query);

  if (!query || typeof query !== "string") {
    throw new Error("Query must be a non-empty string");
  }

  if (!isAlloowedQuery(query)) {
    console.error("[Validator] Query rejected: not allowed");
    throw new Error(
      "Query contains disallowed commands or is not permitted by current configuration"
    );
  }

  console.error("[Validator] Query validated");
}

================
File: v2/.env.example
================
MARIADB_HOST=localhost
MARIADB_PORT=3306
MARIADB_USER=your-user
MARIADB_PASSWORD=your-password
MARIADB_DATABASE=your-default-database
MARIADB_ALLOW_INSERT=false
MARIADB_ALLOW_UPDATE=false
MARIADB_ALLOW_DELETE=false

================
File: v2/mcp-settings-example.json
================
{
  "mcpServers": {
    "mysql": {
      "command": "node",
      "args": ["/absolute/path/to/mariadb-mcp-server/dist/index.js"],
      "env": {
        "MARIADB_HOST": "localhost",
        "MARIADB_PORT": "3306",
        "MARIADB_USER": "your-user",
        "MARIADB_PASSWORD": "your-password",
        "MARIADB_DATABASE": "your-default-database",
        "MARIADB_ALLOW_INSERT": "false",
        "MARIADB_ALLOW_UPDATE": "false",
        "MARIADB_ALLOW_DELETE": "false"
      },
      "disabled": false,
      "autoApprove": []
    }
  }
}

================
File: v2/package.json
================
{
  "name": "mariadb-mcp-server",
  "version": "0.0.1",
  "description": "An MCP server that provides access to MariaDB ou MySQL databases.",
  "type": "module",
  "bin": {
    "mysql-mcp-server": "dist/index.js"
  },
  "files": [
    "dist"
  ],
  "scripts": {
    "build": "tsc && node -e \"require('fs').chmodSync('dist/index.js', '755')\"",
    "prepare": "npm run build",
    "watch": "tsc --watch",
    "inspector": "npx @modelcontextprotocol/inspector dist/index.js",
    "test:setup": "node test-setup.js",
    "test:tools": "node test-tools.js",
    "test": "npm run test:setup && npm run test:tools"
  },
  "keywords": [
    "mcp",
    "mysql",
    "mariadb",
    "database",
    "model-context-protocol",
    "ai",
    "llm"
  ],
  "repository": {
    "type": "git",
    "url": "git+https://github.com/rjsalgado/mariadb-mcp-server.git"
  },
  "author": "Roberto Salgado <roberto@rjssistemas.com.br>",
  "license": "MIT",
  "dependencies": {
    "@modelcontextprotocol/sdk": "1.8.0",
    "mariadb": "^3.4.0"
  },
  "devDependencies": {
    "@types/node": "^22.13.16",
    "dotenv": "^16.4.7",
    "typescript": "^5.8.2"
  }
}

================
File: v2/test-setup.js
================
#!/usr/bin/env node

/**
 * Test setup script for MariaDB / MariaDB MCP server
 * 
 * This script:
 * 1. Creates a test database and table
 * 2. Inserts sample data
 * 3. Tests each MCP tool against the database
 * 
 * Usage:
 *   node test-setup.js
 * 
 * Environment variables:
 *   MARIADB_HOST - host (default: localhost)
 *   MARIADB_PORT - port (default: 3306)
 *   MARIADB_USER - username
 *   MARIADB_PASSWORD - password
 *   MARIADB_ALLOW_INSERT - false
 *   MARIADB_ALLOW_UPDATE - false
 *   MARIADB_ALLOW_DELETE - false
 */

import mariadb from 'mariadb';
import * as dotenv from 'dotenv';

// Load environment variables from .env file
dotenv.config();

// Configuration from environment variables
const config = {
  host: process.env.MARIADB_HOST || 'localhost',
  port: parseInt(process.env.MARIADB_PORT || '3306', 10),
  user: process.env.MARIADB_USER,
  password: process.env.MARIADB_PASSWORD,
  database: process.env.MARIADB_DATABASE,
  allowInsert: process.env.MARIADB_ALLOW_INSERT !== 'false',
  allowUpdate: process.env.MARIADB_ALLOW_UPDATE !== 'false',
  allowDelete: process.env.MARIADB_ALLOW_DELETE !== 'false',
};

// Test database and table names
const TEST_DB = 'teste_db';
const TEST_TABLE = 'users';

// Check required environment variables
if (!config.user || !config.password) {
  console.error('Error: MARIADB_USER and MARIADB_PASSWORD environment variables are required');
  console.error('Example usage:');
  console.error('  MARIADB_USER=root MARIADB_PASSWORD=password node test-setup.js');
  process.exit(1);
}

// Create a connection pool
const pool = mariadb.createPool({
  ...config,
  connectionLimit: 10
});

/**
 * Main function
 */
async function main() {
  console.log('MariaDB MCP Server Test Setup');
  console.log('===========================');
  console.log(`Host: ${config.host}:${config.port}`);
  console.log(`User: ${config.user}`);
  console.log(`Database: ${config.database || 'N/A'}`);
  console.log(`Allow Insert: ${config.allowInsert}`);
  console.log(`Allow Update: ${config.allowUpdate}`);
  console.log(`Allow Delete: ${config.allowDelete}`);
  console.log();

  try {
    // Test connection
    console.log('Testing connection...');
    await testConnection();
    console.log('✅ Connection successful');
    console.log();

    // Create test database
    console.log(`Creating test database '${TEST_DB}'...`);
    await createTestDatabase();
    console.log(`✅ Database '${TEST_DB}' created`);
    console.log();

    // Create test table
    console.log(`Creating test table '${TEST_TABLE}'...`);
    await createTestTable();
    console.log(`✅ Table '${TEST_TABLE}' created`);
    console.log();

    // Insert sample data
    console.log('Inserting sample data...');
    await insertSampleData();
    console.log('✅ Sample data inserted');
    console.log();

    // Test queries
    console.log('Testing queries...');
    await testQueries();
    console.log('✅ All queries executed successfully');
    console.log();

    console.log('Test setup completed successfully!');
    console.log();
    console.log('You can now use the following MCP tools:');
    console.log('1. list_databases - Should show the test database');
    console.log('2. list_tables - With database="mcp_test_db"');
    console.log('3. describe_table - With database="mcp_test_db", table="users"');
    console.log('4. execute_query - With database="mcp_test_db", query="SELECT * FROM users"');
    console.log();
    console.log('MCP Settings Configuration:');
    console.log(JSON.stringify({
      mcpServers: {
        mariadb: {
          command: 'node',
          args: ['/path/to/mariadb-mcp-server/dist/index.js'],
          env: {
            MARIADB_HOST: config.host,
            MARIADB_PORT: String(config.port),
            MARIADB_USER: config.user,
            MARIADB_PASSWORD: config.password,
            MARIADB_DATABASE: TEST_DB,
            MARIADB_ALLOW_INSERT: String(config.allowInsert),
            MARIADB_ALLOW_UPDATE: String(config.allowUpdate),
            MARIADB_ALLOW_DELETE: String(config.allowDelete),
          },
          disabled: false,
          autoApprove: [],
        },
      },
    }, null, 2));
  } catch (error) {
    console.error('❌ Error:', error.message);
    process.exit(1);
  } finally {
    // Close the connection pool
    await pool.end();
  }
}

/**
 * Test the database connection
 */
async function testConnection() {
  const connection = await pool.getConnection();
  connection.release();
}

/**
 * Create the test database
 */
async function createTestDatabase() {
  await pool.query(`DROP DATABASE IF EXISTS ${TEST_DB}`);
  await pool.query(`CREATE DATABASE ${TEST_DB}`);
}

/**
 * Create the test table
 */
async function createTestTable() {
  await pool.query(`USE ${TEST_DB}`);
  await pool.query(`
    CREATE TABLE ${TEST_TABLE} (
      id INT AUTO_INCREMENT PRIMARY KEY,
      name VARCHAR(100) NOT NULL,
      email VARCHAR(100) NOT NULL,
      age INT,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
  `);
}

/**
 * Insert sample data
 */
async function insertSampleData() {
  await pool.query(`USE ${TEST_DB}`);
  
  const users = [
    { name: 'Roberto', email: 'roberto@example.com', age: 53 },
    { name: 'Alerinda', email: 'almerinda@example.com', age: 43 },
    { name: 'Laisa', email: 'laisa@example.com', age: 22 },
    { name: 'Luiza', email: 'luiza@example.com', age: 20 },
    { name: 'Roanna', email: 'roanna@example.com', age: 31 },
  ];
  
  for (const user of users) {
    await pool.query(
      `INSERT INTO ${TEST_TABLE} (name, email, age) VALUES (?, ?, ?)`,
      [user.name, user.email, user.age]
    );
  }
}

/**
 * Test various queries
 */
async function testQueries() {
  await pool.query(`USE ${TEST_DB}`);
  
  // Test SELECT
  const [rows] = await pool.query(`SELECT * FROM ${TEST_TABLE}`);
  console.log(`  - SELECT: Found ${rows.length} rows`);
  
  // Test SHOW TABLES
  const [tables] = await pool.query('SHOW TABLES');
  console.log(`  - SHOW TABLES: Found ${tables.length} tables`);
  
  // Test DESCRIBE
  const [columns] = await pool.query(`DESCRIBE ${TEST_TABLE}`);
  console.log(`  - DESCRIBE: Found ${columns.length} columns`);
}

// Run the main function
main().catch(console.error);

================
File: v2/test-tools.js
================
#!/usr/bin/env node

/**
 * Test script for MariaDB MCP server tools
 * 
 * This script tests each of the MCP tools:
 * 1. list_databases
 * 2. list_tables
 * 3. describe_table
 * 4. execute_query
 * 
 * Usage:
 *   node test-tools.js
 * 
 * Environment variables:
 *   MARIADB_HOST - host (default: localhost)
 *   MARIADB_PORT - port (default: 3306)
 *   MARIADB_USER - username
 *   MARIADB_PASSWORD - password
 *   MARIADB_DATABASE - database
 *   MARIADB_ALLOW_INSERT - false
 *   MARIADB_ALLOW_UPDATE - false
 *   MARIADB_ALLOW_DELETE - false
 */

import { spawn } from 'child_process';
import { resolve } from 'path';
import { fileURLToPath } from 'url';
import { dirname } from 'path';
import * as dotenv from 'dotenv';

// Load environment variables from .env file
dotenv.config();

// Get the directory of the current module
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Path to the built MCP server
const SERVER_PATH = resolve(__dirname, 'dist/index.js');

// Configuration from environment variables
const config = {
  host: process.env.MARIADB_HOST || 'localhost',
  port: process.env.MARIADB_PORT || '3306',
  user: process.env.MARIADB_USER,
  password: process.env.MARIADB_PASSWORD,
  database: process.env.MARIADB_DATABASE || 'teste_db',
  allowInsert: process.env.MARIADB_ALLOW_INSERT !== 'false',
  allowUpdate: process.env.MARIADB_ALLOW_UPDATE !== 'false',
  allowDelete: process.env.MARIADB_ALLOW_DELETE !== 'false',
};

// Check required environment variables
if (!config.user || !config.password) {
  console.error('Error: MARIADB_USER and MARIADB_PASSWORD environment variables are required');
  console.error('Example usage:');
  console.error('  MARIADB_USER=root MARIADB_PASSWORD=password node test-tools.js');
  process.exit(1);
}

// MCP message IDs
let messageId = 1;

/**
 * Main function
 */
async function main() {
  console.log('MariaDB MCP Server Tool Tests');
  console.log('==========================');
  console.log(`Host: ${config.host}:${config.port}`);
  console.log(`User: ${config.user}`);
  console.log(`Database: ${config.database}`);
  console.log(`Allow Insert: ${config.allowInsert}`);
  console.log(`Allow Update: ${config.allowUpdate}`);
  console.log(`Allow Delete: ${config.allowDelete}`);
  console.log();

  // Start the MCP server
  console.log('Starting MCP server...');
  const server = startServer();
  
  try {
    // Wait for server to start
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // Test list_databases
    console.log('\n1. Testing list_databases tool...');
    const databases = await callTool(server, 'list_databases', {});
    console.log('Result:', JSON.stringify(databases, null, 2));
    
    const table = 'users';
    // Test list_tables
    console.log('\n2. Testing list_tables tool...');
    const tables = await callTool(server, 'list_tables', { database: config.database });
    console.log('Result:', JSON.stringify(tables, null, 2));
    
    // Test describe_table
    console.log('\n3. Testing describe_table tool...');
    const tableSchema = await callTool(server, 'describe_table', { 
      database: config.database,
      table
    });
    console.log('Result:', JSON.stringify(tableSchema, null, 2));
    
    // Test execute_query
    console.log('\n4. Testing execute_query tool...');
    const queryResult = await callTool(server, 'execute_query', {
      database: config.database,
      query: `SELECT * FROM ${table} LIMIT 3`
    });
    console.log('Result:', JSON.stringify(queryResult, null, 2));
    
    console.log('\nAll tests completed successfully!');
  } catch (error) {
    console.error('\n❌ Error:', error.message);
  } finally {
    // Kill the server
    server.kill();
  }
}

/**
 * Start the MCP server
 */
function startServer() {
  const env = {
    ...process.env,
    MARIADB_HOST: config.host,
    MARIADB_PORT: config.port,
    MARIADB_USER: config.user,
    MARIADB_PASSWORD: config.password,
    MARIADB_DATABASE: config.database,
    MARIADB_ALLOW_INSERT: String(config.allowInsert),
    MARIADB_ALLOW_UPDATE: String(config.allowUpdate),
    MARIADB_ALLOW_DELETE: String(config.allowDelete),
  };
  
  const server = spawn('node', [SERVER_PATH], { env });
  
  server.stderr.on('data', (data) => {
    // Show server logs
    console.error(`Server: ${data}`);
  });
  
  return server;
}

/**
 * Call an MCP tool
 */
async function callTool(server, toolName, args) {
  return new Promise((resolve, reject) => {
    const id = messageId++;
    
    // Create MCP request
    const request = {
      jsonrpc: '2.0',
      id,
      method: 'tools/call',
      params: {
        name: toolName,
        arguments: args
      }
    };
    
    // Send request to server
    const requestStr = JSON.stringify(request);
    console.log(`Sending request: ${requestStr}`);
    server.stdin.write(requestStr + '\n');
    
    // Handle response
    const onData = (data) => {
      try {
        const dataStr = data.toString().trim();
        console.log(`Received data: ${dataStr}`);
        
        const responses = dataStr.split('\n');
        
        for (const responseStr of responses) {
          if (!responseStr) continue;
          
          console.log(`Processing response: ${responseStr}`);
          const response = JSON.parse(responseStr);
          
          if (response.id === id) {
            server.stdout.removeListener('data', onData);
            
            if (response.error) {
              console.log(`Error response: ${JSON.stringify(response.error)}`);
              reject(new Error(response.error.message));
            } else {
              console.log(`Success response: ${JSON.stringify(response.result)}`);
              // Parse the text content from the response
              try {
                const content = response.result.content[0].text;
                resolve(JSON.parse(content));
              } catch (e) {
                console.log(`Failed to parse content: ${e.message}`);
                resolve(response.result);
              }
            }
          }
        }
      } catch (error) {
        console.log(`Error processing response: ${error.message}`);
        reject(error);
      }
    };
    
    server.stdout.on('data', onData);
    
    // Set timeout
    setTimeout(() => {
      server.stdout.removeListener('data', onData);
      reject(new Error(`Timeout waiting for response to ${toolName}`));
    }, 5000);
  });
}

// Run the main function
main().catch(console.error);

================
File: v2/tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2022",
    "module": "Node16",
    "moduleResolution": "Node16",
    "outDir": "./dist",
    "rootDir": "./src",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules"]
}

================
File: .gitignore
================
node_modules/
dist/
*.log
*lock.json
.env*
!.env.example

================
File: LICENSE
================
MIT License

Copyright (c) 2025

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

================
File: README.md
================
# MariaDB / MySQL Database Access MCP Server

This MCP server provides access to MariaDB / MySQL databases.

It allows you to:
- List available databases
- List tables in a database
- Describe table schemas
- Execute SQL queries

## Security Features
- **Read-only access Default**: SELECT, SHOW, DESCRIBE, and EXPLAIN
- **Query validation**: Prevents SQL injection and blocks any data modification attempts
- **Query timeout**: Prevents long-running queries from consuming resources
- **Row limit**: Prevents excessive data return

## Installation
### Option 1: Install from NPM (Recommended)
```bash
# Install globally
npm install -g mariadb-mcp-server

# Or install locally in your project
npm install mariadb-mcp-server
```

### Option 2: Build from Source
```bash
# Clone the repository
git clone https://github.com/rjsalgado/mariadb-mcp-server.git
cd mariadb-mcp-server

# Install dependencies and build
npm install
npm run build
```

### 2. Configure environment variables
The server requires the following environment variables:

- MARIADB_HOST: Database server hostname
- MARIADB_PORT: Database server port (default: 3306)
- MARIADB_USER: Database username
- MARIADB_PASSWORD: Database password
- MARIADB_DATABASE: Default database name (optional)
- MARIADB_ALLOW_INSERT: false
- MARIADB_ALLOW_UPDATE: false
- MARIADB_ALLOW_DELETE: false
- MARIADB_TIMEOUT_MS: 10000
- MARIADB_ROW_LIMIT: 1000


### 3. Add to MCP settings
Add the following configuration to your MCP settings file:

If you installed via npm (Option 1):
```json
{
  "mcpServers": {
    "mariadb": {
      "command": "npx",
      "args": ["mariadb-mcp-server"],
      "env": {
        "MARIADB_HOST": "your-host",
        "MARIADB_PORT": "3306",
        "MARIADB_USER": "your-user",
        "MARIADB_PASSWORD": "your-password",
        "MARIADB_DATABASE": "your-database",
        "MARIADB_ALLOW_INSERT": "false",
        "MARIADB_ALLOW_UPDATE": "false",
        "MARIADB_ALLOW_DELETE": "false",
        "MARIADB_TIMEOUT_MS": "10000",
        "MARIADB_ROW_LIMIT": "1000",
      },
      "disabled": false,
      "autoApprove": []
    }
  }
}
```

If you built from source (Option 2):
```json
{
  "mcpServers": {
    "mariadb": {
      "command": "node",
      "args": ["/path/to/mariadb-mcp-server/dist/index.js"],
      "env": {
        "MARIADB_HOST": "your-host",
        "MARIADB_PORT": "3306",
        "MARIADB_USER": "your-user",
        "MARIADB_PASSWORD": "your-password",
        "MARIADB_DATABASE": "your-default-database",
        "MARIADB_ALLOW_INSERT": "false",
        "MARIADB_ALLOW_UPDATE": "false",
        "MARIADB_ALLOW_DELETE": "false",
        "MARIADB_TIMEOUT_MS": "10000",
        "MARIADB_ROW_LIMIT": "1000",
      },
      "disabled": false,
      "autoApprove": []
    }
  }
}
```

## Available Tools
**"server_name": "mariadb"** or **"server_name": "mysql"** 


### list_databases
Lists all accessible databases on the MariaDB / MySQL server.
**Parameters**: None

**Example**:
```json
{
  "server_name": "mariadb",
  "tool_name": "list_databases",
  "arguments": {}
}
```

### list_tables
Lists all tables in a specified database.

**Parameters**:
- `database` (optional): Database name (uses default if not specified)

**Example**:
```json
{
  "server_name": "mariadb",
  "tool_name": "list_tables",
  "arguments": {
    "database": "my_database"
  }
}
```

### describe_table
Shows the schema for a specific table.

**Parameters**:
- `database` (optional): Database name (uses default if not specified)
- `table` (required): Table name

**Example**:
```json
{
  "server_name": "mariadb",
  "tool_name": "describe_table",
  "arguments": {
    "database": "my_database",
    "table": "my_table"
  }
}
```

### execute_query
Executes a SQL query.

**Parameters**:
- `query` (required): SQL query
- `database` (optional): Database name (uses default if not specified)

**Example**:
```json
{
  "server_name": "mariadb",
  "tool_name": "execute_query",
  "arguments": {
    "database": "my_database",
    "query": "SELECT * FROM my_table LIMIT 10"
  }
}
```

## Testing
The server includes test scripts to verify functionality with your MariaDB / MySQL setup:

### 1. Setup Test Database
This script creates a test database, table, and sample data:

```bash
# Set your MariaDB / MySQL credentials as environment variables
export MARIADB_HOST=localhost
export MARIADB_PORT=3306
export MARIADB_USER=your_username
export MARIADB_PASSWORD=your_password
export MARIADB_ALLOW_INSERT: false
export MARIADB_ALLOW_UPDATE: false
export MARIADB_ALLOW_DELETE: false
export MARIADB_TIMEOUT_MS=10000
export MARIADB_ROW_LIMIT=1000


# Run the setup script
npm run test:setup
```

### 2. Test MCP Tools
This script tests each of the MCP tools against the test database:

```bash
####
# Set your MariaDB / MySQL credentials as environment variables
MARIADB_HOST=localhost
MARIADB_PORT=3306
MARIADB_USER=your_username
MARIADB_PASSWORD=your_password
MARIADB_DATABASE=mcp_test_db
MARIADB_ALLOW_INSERT=false
MARIADB_ALLOW_UPDATE=false
MARIADB_ALLOW_DELETE=false
MARIADB_TIMEOUT_MS=10000
MARIADB_ROW_LIMIT=1000
MARIADB_DEBUG_SQL=true
####
export MARIADB_HOST=localhost
export MARIADB_PORT=3306
export MARIADB_USER=your_username
export MARIADB_PASSWORD=your_password
export MARIADB_DATABASE=mcp_test_db
export MARIADB_ALLOW_INSERT: false
export MARIADB_ALLOW_UPDATE: false
export MARIADB_ALLOW_DELETE: false
export MARIADB_TIMEOUT_MS=10000
export MARIADB_ROW_LIMIT=1000


# Run the tools test script
npm run test:tools
```

### 3. Run All Tests
To run both setup and tool tests:

```bash
# Set your MariaDB / MySQL credentials as environment variables
export MARIADB_HOST=localhost
export MARIADB_PORT=3306
export MARIADB_USER=your_username
export MARIADB_PASSWORD=your_password
export MARIADB_ALLOW_INSERT: false
export MARIADB_ALLOW_UPDATE: false
export MARIADB_ALLOW_DELETE: false
export MARIADB_TIMEOUT_MS=10000
export MARIADB_ROW_LIMIT=1000

# Run all tests
npm test
```

## Troubleshooting
If you encounter issues:

1. Check the server logs for error messages
2. Verify your MariaDB/MySQL credentials and connection details
3. Ensure your MariaDB/MySQL user has appropriate permissions
4. Check that your query is read-only and properly formatted


**Inspiration**
**https://github.com/dpflucas/mysql-mcp-server**

## License

This project is licensed under the MIT License - see the [LICENSE](./LICENSE) file for details.



================================================================
End of Codebase
================================================================
